function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-Feb-2020 20:55:53.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx13 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx4 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [10.55122;18.40086;-39.67926;12.15254;-14.14544;1.953335;-12.63301;-5.024483;-8.485577;3.05835;-9.330165;-5.183512;-6.146364];
x1_step1.gain = [0.0518000518000518;0.0680134693874775;0.0513846136533492;0.0779698825734584;0.0858046981246997;0.124282540198411;0.0898759949441158;0.149829299479103;0.13590408596314;0.189888079965668;0.213694945755098;0.155075352664613;0.226505901837778];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.1090005486442411353;-0.47005990992527546535;0.76651183774701192597;-1.2476098742512853335;-1.6189337372948662264];
IW1_1 = [0.79982673424458616829 0.68429301735582970245 0.3435407825506317514 -0.29879316854883852805 -0.37256680502077521577 -1.132970287486242178 0.53624029190773969678 -0.77067723331809878662 0.065143914092261751003 0.68763665967167497683 0.045968388332675746977 0.27389124184302610088 -0.2112908594882130231;0.039340863313586320327 -0.13996393129794384991 -0.78827335069132742351 0.34595247129252043594 0.86243842467094566917 -0.034864989870670798355 -0.062748212794003485615 0.30496798593121621224 0.52662359121633373071 -0.36428260480974977709 0.30336143110839464132 -1.2432532652611794077 0.22570475292295588687;-0.052514803009453894789 0.47078025873122519851 -1.2005588833757350198 -0.3685363202224102297 0.14269041792547487724 -0.77034453163017813093 0.73436821253102668727 -0.84915072269731994847 0.93268278248996328017 -0.00029713491685041948376 0.7540997089926333441 -0.131572918878189421 0.59331240845148680574;-0.53748960847763482818 -0.92342194222897067135 0.21331836884434479673 0.7856738216904304295 1.133004832368756043 0.39845176562079948068 0.18656680245794921014 -0.11766209689414353079 -0.18072009798279414783 -0.30740704076419583801 -0.81569538134814401076 -0.35675298605200783664 -0.14260953982743729274;0.081592005698558414672 0.17672623777189455652 0.38669605017065167285 -0.37139209710982290513 0.022217891459589547004 -0.60307798140298030098 -0.34848808805250802711 0.16799695725722552098 0.59834713618695634096 -0.80033760658368768848 0.29433501416139468132 0.43061039567949638274 0.038291557552546151566];

% Layer 2
b2 = [-0.20126178218016088639;-0.022615511899870682777;0.59310903103854462071;-0.58696101768370756435];
LW2_1 = [1.3567701416852466778 -1.1687466229451608513 0.67982440192926940625 -0.81543401414191929444 0.24953155744785726622;-0.70594441749692293797 0.34815342130961351996 0.86460669544771684425 -1.0149831022096214017 0.17163556721204431543;0.40872359475466701895 0.58849075164244657454 1.217375120368788366 1.8120245953565805586 0.5275093221976177027;0.024424266943003994368 -1.0108700956376113211 -1.8848669014864276594 -0.94988078911473516897 0.14201202562119130679];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
